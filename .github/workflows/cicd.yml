name: CI&CD

on:
  push:
    branches:
      - 'master'
      - 'develop'

env:
  CARGO_TERM_COLOR: always
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: europe-north1
  IMAGE_BACKEND: hy-kube-backend
  IMAGE_FRONTEND: hy-kube-frontend
  IMAGE_RANDOMTASK: hy-kube-randomtask

jobs:
  build-and-push-pingpong:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pingpong

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: tkasu/hy-kube-pingpong

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./pingpong
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-and-push-mainapp-writer:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mainapp

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: tkasu/hy-kube-mainapp-writer

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./mainapp
        file: ./mainapp/Dockerfile.writer
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-and-push-mainapp-reader:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mainapp

    steps:
    - uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: tkasu/hy-kube-mainapp-reader

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./mainapp
        file: ./mainapp/Dockerfile.reader
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-and-push-project-backend:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/backend

    steps:
    - uses: actions/checkout@v3

    - id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Test gcloud CLI
      run: gcloud info

    - name: Configure Docker gcr auth
      run: |-
        gcloud --quiet auth configure-docker $GKE_ZONE-docker.pkg.dev

    - name: Build Docker container
      run: |-
        docker build \
          -f Dockerfile.server \
          --tag "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_BACKEND:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
        .

    - name: Publish Docker container to GCP Artifact Registry
      run: |-
        docker push "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_BACKEND:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

  build-and-push-project-randomtask:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/backend

    steps:
    - uses: actions/checkout@v3

    - id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Test gcloud CLI
      run: gcloud info

    - name: Configure Docker gcr auth
      run: |-
        gcloud --quiet auth configure-docker $GKE_ZONE-docker.pkg.dev

    - name: Build Docker container
      run: |-
        docker build \
          -f Dockerfile.randomtask \
          --tag "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_RANDOMTASK:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
        .

    - name: Publish Docker container to GCP Artifact Registry
      run: |-
        docker push "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_RANDOMTASK:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

  build-and-push-project-frontend:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./project/frontend

    steps:
    - uses: actions/checkout@v3

    - id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Test gcloud CLI
      run: gcloud info

    - name: Configure Docker gcr auth
      run: |-
        gcloud --quiet auth configure-docker $GKE_ZONE-docker.pkg.dev

    - name: Build Docker container
      run: |-
        docker build \
          -f Dockerfile.kube \
          --tag "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_FRONTEND:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
        .

    - name: Publish Docker container to GCP Artifact Registry
      run: |-
        docker push "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_FRONTEND:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

  deploy-project-to-kubernetes:
    needs: [
      build-and-push-project-backend,
      build-and-push-project-randomtask,
      build-and-push-project-frontend
    ]

    runs-on: ubuntu-latest

    env:
      GKE_CLUSTER: ${{ secrets.GKE_PROJECT }}-gke-cluster
      SOPS_AGE_KEY:  ${{ secrets.SOPS_PRIVATE_KEY }}

    steps:
    - uses: actions/checkout@v3

    - id: auth
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Test gcloud CLI
      run: gcloud info

    - name: Setup GKE credentials
      run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Set up Kustomize
      uses: imranismail/setup-kustomize@v1

    - name: Set up KSOPS
      run: curl -s https://raw.githubusercontent.com/viaduct-ai/kustomize-sops/master/scripts/install-ksops-archive.sh | bash

    - name: Deploy project to Kubernetes
      run: |-
        cd project
        kubectl create namespace hy-kube-project-${GITHUB_REF#refs/heads/} || true
        kustomize edit set namespace hy-kube-project-${GITHUB_REF#refs/heads/}
        kustomize edit set image \
          IMAGE_BACKEND=$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_BACKEND:${GITHUB_REF#refs/heads/}-$GITHUB_SHA \
          IMAGE_FRONTEND=$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_FRONTEND:${GITHUB_REF#refs/heads/}-$GITHUB_SHA \
          IMAGE_RANDOMTASK=$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$PROJECT_ID-default/$IMAGE_RANDOMTASK:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
        kubectl kustomize --enable-alpha-plugins . | kubectl apply -f -
        kubectl rollout status deployment $IMAGE_BACKEND
        kubectl rollout status deployment $FRONTEND_BACKEND
        kubectl get ingress -o wide --namespace hy-kube-project
